// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: file_trans.proto

#include "file_trans.pb.h"
#include "file_trans.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace file_trans {

static const char* WebpackServer_method_names[] = {
  "/file_trans.WebpackServer/SendFile",
};

std::unique_ptr< WebpackServer::Stub> WebpackServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WebpackServer::Stub> stub(new WebpackServer::Stub(channel));
  return stub;
}

WebpackServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SendFile_(WebpackServer_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::file_trans::FileChunk>* WebpackServer::Stub::SendFileRaw(::grpc::ClientContext* context, const ::file_trans::Request& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::file_trans::FileChunk>::Create(channel_.get(), rpcmethod_SendFile_, context, request);
}

void WebpackServer::Stub::experimental_async::SendFile(::grpc::ClientContext* context, ::file_trans::Request* request, ::grpc::experimental::ClientReadReactor< ::file_trans::FileChunk>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::file_trans::FileChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_SendFile_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::file_trans::FileChunk>* WebpackServer::Stub::AsyncSendFileRaw(::grpc::ClientContext* context, const ::file_trans::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::file_trans::FileChunk>::Create(channel_.get(), cq, rpcmethod_SendFile_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::file_trans::FileChunk>* WebpackServer::Stub::PrepareAsyncSendFileRaw(::grpc::ClientContext* context, const ::file_trans::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::file_trans::FileChunk>::Create(channel_.get(), cq, rpcmethod_SendFile_, context, request, false, nullptr);
}

WebpackServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WebpackServer_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< WebpackServer::Service, ::file_trans::Request, ::file_trans::FileChunk>(
          [](WebpackServer::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::file_trans::Request* req,
             ::grpc_impl::ServerWriter<::file_trans::FileChunk>* writer) {
               return service->SendFile(ctx, req, writer);
             }, this)));
}

WebpackServer::Service::~Service() {
}

::grpc::Status WebpackServer::Service::SendFile(::grpc::ServerContext* context, const ::file_trans::Request* request, ::grpc::ServerWriter< ::file_trans::FileChunk>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace file_trans

